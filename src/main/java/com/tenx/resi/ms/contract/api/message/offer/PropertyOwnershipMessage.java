/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.tenx.resi.ms.contract.api.message.offer;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PropertyOwnershipMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2586932506000261364L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PropertyOwnershipMessage\",\"namespace\":\"com.tenx.resi.ms.contract.api.message.offer\",\"fields\":[{\"name\":\"propertyOwnershipEntityId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"entityType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"entitySubType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"entityName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"entityState\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"signatures\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OwnershipSignatureMessage\",\"fields\":[{\"name\":\"ownershipSignatureId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"signorNameTitle\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"signerName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"signerTitle\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"signerTitleOther\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"managingCompanyName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"trustDate\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Date\",\"namespace\":\"java.util\",\"fields\":[]}],\"default\":null},{\"name\":\"sortOrder\",\"type\":[\"null\",\"double\"],\"default\":null}]},\"java-class\":\"java.util.List\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PropertyOwnershipMessage> ENCODER =
      new BinaryMessageEncoder<PropertyOwnershipMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PropertyOwnershipMessage> DECODER =
      new BinaryMessageDecoder<PropertyOwnershipMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PropertyOwnershipMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PropertyOwnershipMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PropertyOwnershipMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PropertyOwnershipMessage>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PropertyOwnershipMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PropertyOwnershipMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PropertyOwnershipMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PropertyOwnershipMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Long propertyOwnershipEntityId;
   private java.lang.CharSequence entityType;
   private java.lang.CharSequence entitySubType;
   private java.lang.CharSequence entityName;
   private java.lang.CharSequence entityState;
   private java.util.List<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage> signatures;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PropertyOwnershipMessage() {}

  /**
   * All-args constructor.
   * @param propertyOwnershipEntityId The new value for propertyOwnershipEntityId
   * @param entityType The new value for entityType
   * @param entitySubType The new value for entitySubType
   * @param entityName The new value for entityName
   * @param entityState The new value for entityState
   * @param signatures The new value for signatures
   */
  public PropertyOwnershipMessage(java.lang.Long propertyOwnershipEntityId, java.lang.CharSequence entityType, java.lang.CharSequence entitySubType, java.lang.CharSequence entityName, java.lang.CharSequence entityState, java.util.List<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage> signatures) {
    this.propertyOwnershipEntityId = propertyOwnershipEntityId;
    this.entityType = entityType;
    this.entitySubType = entitySubType;
    this.entityName = entityName;
    this.entityState = entityState;
    this.signatures = signatures;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return propertyOwnershipEntityId;
    case 1: return entityType;
    case 2: return entitySubType;
    case 3: return entityName;
    case 4: return entityState;
    case 5: return signatures;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: propertyOwnershipEntityId = (java.lang.Long)value$; break;
    case 1: entityType = (java.lang.CharSequence)value$; break;
    case 2: entitySubType = (java.lang.CharSequence)value$; break;
    case 3: entityName = (java.lang.CharSequence)value$; break;
    case 4: entityState = (java.lang.CharSequence)value$; break;
    case 5: signatures = (java.util.List<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'propertyOwnershipEntityId' field.
   * @return The value of the 'propertyOwnershipEntityId' field.
   */
  public java.lang.Long getPropertyOwnershipEntityId() {
    return propertyOwnershipEntityId;
  }


  /**
   * Sets the value of the 'propertyOwnershipEntityId' field.
   * @param value the value to set.
   */
  public void setPropertyOwnershipEntityId(java.lang.Long value) {
    this.propertyOwnershipEntityId = value;
  }

  /**
   * Gets the value of the 'entityType' field.
   * @return The value of the 'entityType' field.
   */
  public java.lang.CharSequence getEntityType() {
    return entityType;
  }


  /**
   * Sets the value of the 'entityType' field.
   * @param value the value to set.
   */
  public void setEntityType(java.lang.CharSequence value) {
    this.entityType = value;
  }

  /**
   * Gets the value of the 'entitySubType' field.
   * @return The value of the 'entitySubType' field.
   */
  public java.lang.CharSequence getEntitySubType() {
    return entitySubType;
  }


  /**
   * Sets the value of the 'entitySubType' field.
   * @param value the value to set.
   */
  public void setEntitySubType(java.lang.CharSequence value) {
    this.entitySubType = value;
  }

  /**
   * Gets the value of the 'entityName' field.
   * @return The value of the 'entityName' field.
   */
  public java.lang.CharSequence getEntityName() {
    return entityName;
  }


  /**
   * Sets the value of the 'entityName' field.
   * @param value the value to set.
   */
  public void setEntityName(java.lang.CharSequence value) {
    this.entityName = value;
  }

  /**
   * Gets the value of the 'entityState' field.
   * @return The value of the 'entityState' field.
   */
  public java.lang.CharSequence getEntityState() {
    return entityState;
  }


  /**
   * Sets the value of the 'entityState' field.
   * @param value the value to set.
   */
  public void setEntityState(java.lang.CharSequence value) {
    this.entityState = value;
  }

  /**
   * Gets the value of the 'signatures' field.
   * @return The value of the 'signatures' field.
   */
  public java.util.List<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage> getSignatures() {
    return signatures;
  }


  /**
   * Sets the value of the 'signatures' field.
   * @param value the value to set.
   */
  public void setSignatures(java.util.List<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage> value) {
    this.signatures = value;
  }

  /**
   * Creates a new PropertyOwnershipMessage RecordBuilder.
   * @return A new PropertyOwnershipMessage RecordBuilder
   */
  public static com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder newBuilder() {
    return new com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder();
  }

  /**
   * Creates a new PropertyOwnershipMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PropertyOwnershipMessage RecordBuilder
   */
  public static com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder newBuilder(com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder other) {
    if (other == null) {
      return new com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder();
    } else {
      return new com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder(other);
    }
  }

  /**
   * Creates a new PropertyOwnershipMessage RecordBuilder by copying an existing PropertyOwnershipMessage instance.
   * @param other The existing instance to copy.
   * @return A new PropertyOwnershipMessage RecordBuilder
   */
  public static com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder newBuilder(com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage other) {
    if (other == null) {
      return new com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder();
    } else {
      return new com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for PropertyOwnershipMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PropertyOwnershipMessage>
    implements org.apache.avro.data.RecordBuilder<PropertyOwnershipMessage> {

    private java.lang.Long propertyOwnershipEntityId;
    private java.lang.CharSequence entityType;
    private java.lang.CharSequence entitySubType;
    private java.lang.CharSequence entityName;
    private java.lang.CharSequence entityState;
    private java.util.List<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage> signatures;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.propertyOwnershipEntityId)) {
        this.propertyOwnershipEntityId = data().deepCopy(fields()[0].schema(), other.propertyOwnershipEntityId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.entityType)) {
        this.entityType = data().deepCopy(fields()[1].schema(), other.entityType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.entitySubType)) {
        this.entitySubType = data().deepCopy(fields()[2].schema(), other.entitySubType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.entityName)) {
        this.entityName = data().deepCopy(fields()[3].schema(), other.entityName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.entityState)) {
        this.entityState = data().deepCopy(fields()[4].schema(), other.entityState);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.signatures)) {
        this.signatures = data().deepCopy(fields()[5].schema(), other.signatures);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing PropertyOwnershipMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.propertyOwnershipEntityId)) {
        this.propertyOwnershipEntityId = data().deepCopy(fields()[0].schema(), other.propertyOwnershipEntityId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.entityType)) {
        this.entityType = data().deepCopy(fields()[1].schema(), other.entityType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.entitySubType)) {
        this.entitySubType = data().deepCopy(fields()[2].schema(), other.entitySubType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.entityName)) {
        this.entityName = data().deepCopy(fields()[3].schema(), other.entityName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.entityState)) {
        this.entityState = data().deepCopy(fields()[4].schema(), other.entityState);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.signatures)) {
        this.signatures = data().deepCopy(fields()[5].schema(), other.signatures);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'propertyOwnershipEntityId' field.
      * @return The value.
      */
    public java.lang.Long getPropertyOwnershipEntityId() {
      return propertyOwnershipEntityId;
    }


    /**
      * Sets the value of the 'propertyOwnershipEntityId' field.
      * @param value The value of 'propertyOwnershipEntityId'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder setPropertyOwnershipEntityId(java.lang.Long value) {
      validate(fields()[0], value);
      this.propertyOwnershipEntityId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'propertyOwnershipEntityId' field has been set.
      * @return True if the 'propertyOwnershipEntityId' field has been set, false otherwise.
      */
    public boolean hasPropertyOwnershipEntityId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'propertyOwnershipEntityId' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder clearPropertyOwnershipEntityId() {
      propertyOwnershipEntityId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityType() {
      return entityType;
    }


    /**
      * Sets the value of the 'entityType' field.
      * @param value The value of 'entityType'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder setEntityType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.entityType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'entityType' field has been set.
      * @return True if the 'entityType' field has been set, false otherwise.
      */
    public boolean hasEntityType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'entityType' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder clearEntityType() {
      entityType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'entitySubType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntitySubType() {
      return entitySubType;
    }


    /**
      * Sets the value of the 'entitySubType' field.
      * @param value The value of 'entitySubType'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder setEntitySubType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.entitySubType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'entitySubType' field has been set.
      * @return True if the 'entitySubType' field has been set, false otherwise.
      */
    public boolean hasEntitySubType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'entitySubType' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder clearEntitySubType() {
      entitySubType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityName' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityName() {
      return entityName;
    }


    /**
      * Sets the value of the 'entityName' field.
      * @param value The value of 'entityName'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder setEntityName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.entityName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'entityName' field has been set.
      * @return True if the 'entityName' field has been set, false otherwise.
      */
    public boolean hasEntityName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'entityName' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder clearEntityName() {
      entityName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityState' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityState() {
      return entityState;
    }


    /**
      * Sets the value of the 'entityState' field.
      * @param value The value of 'entityState'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder setEntityState(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.entityState = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'entityState' field has been set.
      * @return True if the 'entityState' field has been set, false otherwise.
      */
    public boolean hasEntityState() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'entityState' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder clearEntityState() {
      entityState = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'signatures' field.
      * @return The value.
      */
    public java.util.List<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage> getSignatures() {
      return signatures;
    }


    /**
      * Sets the value of the 'signatures' field.
      * @param value The value of 'signatures'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder setSignatures(java.util.List<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage> value) {
      validate(fields()[5], value);
      this.signatures = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'signatures' field has been set.
      * @return True if the 'signatures' field has been set, false otherwise.
      */
    public boolean hasSignatures() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'signatures' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.PropertyOwnershipMessage.Builder clearSignatures() {
      signatures = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PropertyOwnershipMessage build() {
      try {
        PropertyOwnershipMessage record = new PropertyOwnershipMessage();
        record.propertyOwnershipEntityId = fieldSetFlags()[0] ? this.propertyOwnershipEntityId : (java.lang.Long) defaultValue(fields()[0]);
        record.entityType = fieldSetFlags()[1] ? this.entityType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.entitySubType = fieldSetFlags()[2] ? this.entitySubType : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.entityName = fieldSetFlags()[3] ? this.entityName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.entityState = fieldSetFlags()[4] ? this.entityState : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.signatures = fieldSetFlags()[5] ? this.signatures : (java.util.List<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PropertyOwnershipMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<PropertyOwnershipMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PropertyOwnershipMessage>
    READER$ = (org.apache.avro.io.DatumReader<PropertyOwnershipMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.propertyOwnershipEntityId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.propertyOwnershipEntityId);
    }

    if (this.entityType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entityType);
    }

    if (this.entitySubType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entitySubType);
    }

    if (this.entityName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entityName);
    }

    if (this.entityState == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entityState);
    }

    if (this.signatures == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.signatures.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage e0: this.signatures) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.propertyOwnershipEntityId = null;
      } else {
        this.propertyOwnershipEntityId = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entityType = null;
      } else {
        this.entityType = in.readString(this.entityType instanceof Utf8 ? (Utf8)this.entityType : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entitySubType = null;
      } else {
        this.entitySubType = in.readString(this.entitySubType instanceof Utf8 ? (Utf8)this.entitySubType : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entityName = null;
      } else {
        this.entityName = in.readString(this.entityName instanceof Utf8 ? (Utf8)this.entityName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entityState = null;
      } else {
        this.entityState = in.readString(this.entityState instanceof Utf8 ? (Utf8)this.entityState : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.signatures = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage> a0 = this.signatures;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage>((int)size0, SCHEMA$.getField("signatures").schema().getTypes().get(1));
          this.signatures = a0;
        } else a0.clear();
        SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.propertyOwnershipEntityId = null;
          } else {
            this.propertyOwnershipEntityId = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entityType = null;
          } else {
            this.entityType = in.readString(this.entityType instanceof Utf8 ? (Utf8)this.entityType : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entitySubType = null;
          } else {
            this.entitySubType = in.readString(this.entitySubType instanceof Utf8 ? (Utf8)this.entitySubType : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entityName = null;
          } else {
            this.entityName = in.readString(this.entityName instanceof Utf8 ? (Utf8)this.entityName : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entityState = null;
          } else {
            this.entityState = in.readString(this.entityState instanceof Utf8 ? (Utf8)this.entityState : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.signatures = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage> a0 = this.signatures;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage>((int)size0, SCHEMA$.getField("signatures").schema().getTypes().get(1));
              this.signatures = a0;
            } else a0.clear();
            SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.tenx.resi.ms.contract.api.message.offer.OwnershipSignatureMessage();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










