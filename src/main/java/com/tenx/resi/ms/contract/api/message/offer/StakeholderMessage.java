/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.tenx.resi.ms.contract.api.message.offer;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StakeholderMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 746582483685574468L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StakeholderMessage\",\"namespace\":\"com.tenx.resi.ms.contract.api.message.offer\",\"fields\":[{\"name\":\"stakeholderId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"stakeholders\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"StakeholderMessage\",\"java-class\":\"java.util.List\"}],\"default\":null},{\"name\":\"signers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SignerMessage\",\"fields\":[{\"name\":\"signerId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"signerName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"signerTitle\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"signerTitleOther\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"percentStake\",\"type\":[\"null\",{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"}],\"default\":null},{\"name\":\"isSigner\",\"type\":\"boolean\"},{\"name\":\"signerEmail\",\"type\":[\"null\",\"string\"],\"default\":null}]},\"java-class\":\"java.util.List\"}],\"default\":null},{\"name\":\"entityName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"entityType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"entitySubType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"entityState\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"entityDate\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Date\",\"namespace\":\"java.util\",\"fields\":[]}],\"default\":null},{\"name\":\"entityTitle\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"entityTitleOtherDesc\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"percentStake\",\"type\":[\"null\",{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"}],\"default\":null},{\"name\":\"isMoreEntityInvolved\",\"type\":\"boolean\"},{\"name\":\"isMoreSignerInvolved\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StakeholderMessage> ENCODER =
      new BinaryMessageEncoder<StakeholderMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StakeholderMessage> DECODER =
      new BinaryMessageDecoder<StakeholderMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StakeholderMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StakeholderMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StakeholderMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StakeholderMessage>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StakeholderMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StakeholderMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StakeholderMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StakeholderMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Long stakeholderId;
   private java.util.List<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage> stakeholders;
   private java.util.List<com.tenx.resi.ms.contract.api.message.offer.SignerMessage> signers;
   private java.lang.CharSequence entityName;
   private java.lang.CharSequence entityType;
   private java.lang.CharSequence entitySubType;
   private java.lang.CharSequence entityState;
   private java.util.Date entityDate;
   private java.lang.CharSequence entityTitle;
   private java.lang.CharSequence entityTitleOtherDesc;
   private java.math.BigDecimal percentStake;
   private boolean isMoreEntityInvolved;
   private boolean isMoreSignerInvolved;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StakeholderMessage() {}

  /**
   * All-args constructor.
   * @param stakeholderId The new value for stakeholderId
   * @param stakeholders The new value for stakeholders
   * @param signers The new value for signers
   * @param entityName The new value for entityName
   * @param entityType The new value for entityType
   * @param entitySubType The new value for entitySubType
   * @param entityState The new value for entityState
   * @param entityDate The new value for entityDate
   * @param entityTitle The new value for entityTitle
   * @param entityTitleOtherDesc The new value for entityTitleOtherDesc
   * @param percentStake The new value for percentStake
   * @param isMoreEntityInvolved The new value for isMoreEntityInvolved
   * @param isMoreSignerInvolved The new value for isMoreSignerInvolved
   */
  public StakeholderMessage(java.lang.Long stakeholderId, java.util.List<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage> stakeholders, java.util.List<com.tenx.resi.ms.contract.api.message.offer.SignerMessage> signers, java.lang.CharSequence entityName, java.lang.CharSequence entityType, java.lang.CharSequence entitySubType, java.lang.CharSequence entityState, java.util.Date entityDate, java.lang.CharSequence entityTitle, java.lang.CharSequence entityTitleOtherDesc, java.math.BigDecimal percentStake, java.lang.Boolean isMoreEntityInvolved, java.lang.Boolean isMoreSignerInvolved) {
    this.stakeholderId = stakeholderId;
    this.stakeholders = stakeholders;
    this.signers = signers;
    this.entityName = entityName;
    this.entityType = entityType;
    this.entitySubType = entitySubType;
    this.entityState = entityState;
    this.entityDate = entityDate;
    this.entityTitle = entityTitle;
    this.entityTitleOtherDesc = entityTitleOtherDesc;
    this.percentStake = percentStake;
    this.isMoreEntityInvolved = isMoreEntityInvolved;
    this.isMoreSignerInvolved = isMoreSignerInvolved;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stakeholderId;
    case 1: return stakeholders;
    case 2: return signers;
    case 3: return entityName;
    case 4: return entityType;
    case 5: return entitySubType;
    case 6: return entityState;
    case 7: return entityDate;
    case 8: return entityTitle;
    case 9: return entityTitleOtherDesc;
    case 10: return percentStake;
    case 11: return isMoreEntityInvolved;
    case 12: return isMoreSignerInvolved;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stakeholderId = (java.lang.Long)value$; break;
    case 1: stakeholders = (java.util.List<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage>)value$; break;
    case 2: signers = (java.util.List<com.tenx.resi.ms.contract.api.message.offer.SignerMessage>)value$; break;
    case 3: entityName = (java.lang.CharSequence)value$; break;
    case 4: entityType = (java.lang.CharSequence)value$; break;
    case 5: entitySubType = (java.lang.CharSequence)value$; break;
    case 6: entityState = (java.lang.CharSequence)value$; break;
    case 7: entityDate = (java.util.Date)value$; break;
    case 8: entityTitle = (java.lang.CharSequence)value$; break;
    case 9: entityTitleOtherDesc = (java.lang.CharSequence)value$; break;
    case 10: percentStake = (java.math.BigDecimal)value$; break;
    case 11: isMoreEntityInvolved = (java.lang.Boolean)value$; break;
    case 12: isMoreSignerInvolved = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'stakeholderId' field.
   * @return The value of the 'stakeholderId' field.
   */
  public java.lang.Long getStakeholderId() {
    return stakeholderId;
  }


  /**
   * Sets the value of the 'stakeholderId' field.
   * @param value the value to set.
   */
  public void setStakeholderId(java.lang.Long value) {
    this.stakeholderId = value;
  }

  /**
   * Gets the value of the 'stakeholders' field.
   * @return The value of the 'stakeholders' field.
   */
  public java.util.List<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage> getStakeholders() {
    return stakeholders;
  }


  /**
   * Sets the value of the 'stakeholders' field.
   * @param value the value to set.
   */
  public void setStakeholders(java.util.List<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage> value) {
    this.stakeholders = value;
  }

  /**
   * Gets the value of the 'signers' field.
   * @return The value of the 'signers' field.
   */
  public java.util.List<com.tenx.resi.ms.contract.api.message.offer.SignerMessage> getSigners() {
    return signers;
  }


  /**
   * Sets the value of the 'signers' field.
   * @param value the value to set.
   */
  public void setSigners(java.util.List<com.tenx.resi.ms.contract.api.message.offer.SignerMessage> value) {
    this.signers = value;
  }

  /**
   * Gets the value of the 'entityName' field.
   * @return The value of the 'entityName' field.
   */
  public java.lang.CharSequence getEntityName() {
    return entityName;
  }


  /**
   * Sets the value of the 'entityName' field.
   * @param value the value to set.
   */
  public void setEntityName(java.lang.CharSequence value) {
    this.entityName = value;
  }

  /**
   * Gets the value of the 'entityType' field.
   * @return The value of the 'entityType' field.
   */
  public java.lang.CharSequence getEntityType() {
    return entityType;
  }


  /**
   * Sets the value of the 'entityType' field.
   * @param value the value to set.
   */
  public void setEntityType(java.lang.CharSequence value) {
    this.entityType = value;
  }

  /**
   * Gets the value of the 'entitySubType' field.
   * @return The value of the 'entitySubType' field.
   */
  public java.lang.CharSequence getEntitySubType() {
    return entitySubType;
  }


  /**
   * Sets the value of the 'entitySubType' field.
   * @param value the value to set.
   */
  public void setEntitySubType(java.lang.CharSequence value) {
    this.entitySubType = value;
  }

  /**
   * Gets the value of the 'entityState' field.
   * @return The value of the 'entityState' field.
   */
  public java.lang.CharSequence getEntityState() {
    return entityState;
  }


  /**
   * Sets the value of the 'entityState' field.
   * @param value the value to set.
   */
  public void setEntityState(java.lang.CharSequence value) {
    this.entityState = value;
  }

  /**
   * Gets the value of the 'entityDate' field.
   * @return The value of the 'entityDate' field.
   */
  public java.util.Date getEntityDate() {
    return entityDate;
  }


  /**
   * Sets the value of the 'entityDate' field.
   * @param value the value to set.
   */
  public void setEntityDate(java.util.Date value) {
    this.entityDate = value;
  }

  /**
   * Gets the value of the 'entityTitle' field.
   * @return The value of the 'entityTitle' field.
   */
  public java.lang.CharSequence getEntityTitle() {
    return entityTitle;
  }


  /**
   * Sets the value of the 'entityTitle' field.
   * @param value the value to set.
   */
  public void setEntityTitle(java.lang.CharSequence value) {
    this.entityTitle = value;
  }

  /**
   * Gets the value of the 'entityTitleOtherDesc' field.
   * @return The value of the 'entityTitleOtherDesc' field.
   */
  public java.lang.CharSequence getEntityTitleOtherDesc() {
    return entityTitleOtherDesc;
  }


  /**
   * Sets the value of the 'entityTitleOtherDesc' field.
   * @param value the value to set.
   */
  public void setEntityTitleOtherDesc(java.lang.CharSequence value) {
    this.entityTitleOtherDesc = value;
  }

  /**
   * Gets the value of the 'percentStake' field.
   * @return The value of the 'percentStake' field.
   */
  public java.math.BigDecimal getPercentStake() {
    return percentStake;
  }


  /**
   * Sets the value of the 'percentStake' field.
   * @param value the value to set.
   */
  public void setPercentStake(java.math.BigDecimal value) {
    this.percentStake = value;
  }

  /**
   * Gets the value of the 'isMoreEntityInvolved' field.
   * @return The value of the 'isMoreEntityInvolved' field.
   */
  public boolean getIsMoreEntityInvolved() {
    return isMoreEntityInvolved;
  }


  /**
   * Sets the value of the 'isMoreEntityInvolved' field.
   * @param value the value to set.
   */
  public void setIsMoreEntityInvolved(boolean value) {
    this.isMoreEntityInvolved = value;
  }

  /**
   * Gets the value of the 'isMoreSignerInvolved' field.
   * @return The value of the 'isMoreSignerInvolved' field.
   */
  public boolean getIsMoreSignerInvolved() {
    return isMoreSignerInvolved;
  }


  /**
   * Sets the value of the 'isMoreSignerInvolved' field.
   * @param value the value to set.
   */
  public void setIsMoreSignerInvolved(boolean value) {
    this.isMoreSignerInvolved = value;
  }

  /**
   * Creates a new StakeholderMessage RecordBuilder.
   * @return A new StakeholderMessage RecordBuilder
   */
  public static com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder newBuilder() {
    return new com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder();
  }

  /**
   * Creates a new StakeholderMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StakeholderMessage RecordBuilder
   */
  public static com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder newBuilder(com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder other) {
    if (other == null) {
      return new com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder();
    } else {
      return new com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder(other);
    }
  }

  /**
   * Creates a new StakeholderMessage RecordBuilder by copying an existing StakeholderMessage instance.
   * @param other The existing instance to copy.
   * @return A new StakeholderMessage RecordBuilder
   */
  public static com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder newBuilder(com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage other) {
    if (other == null) {
      return new com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder();
    } else {
      return new com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for StakeholderMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StakeholderMessage>
    implements org.apache.avro.data.RecordBuilder<StakeholderMessage> {

    private java.lang.Long stakeholderId;
    private java.util.List<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage> stakeholders;
    private java.util.List<com.tenx.resi.ms.contract.api.message.offer.SignerMessage> signers;
    private java.lang.CharSequence entityName;
    private java.lang.CharSequence entityType;
    private java.lang.CharSequence entitySubType;
    private java.lang.CharSequence entityState;
    private java.util.Date entityDate;
    private Object entityDateBuilder;
    private java.lang.CharSequence entityTitle;
    private java.lang.CharSequence entityTitleOtherDesc;
    private java.math.BigDecimal percentStake;
    private boolean isMoreEntityInvolved;
    private boolean isMoreSignerInvolved;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stakeholderId)) {
        this.stakeholderId = data().deepCopy(fields()[0].schema(), other.stakeholderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.stakeholders)) {
        this.stakeholders = data().deepCopy(fields()[1].schema(), other.stakeholders);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.signers)) {
        this.signers = data().deepCopy(fields()[2].schema(), other.signers);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.entityName)) {
        this.entityName = data().deepCopy(fields()[3].schema(), other.entityName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.entityType)) {
        this.entityType = data().deepCopy(fields()[4].schema(), other.entityType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.entitySubType)) {
        this.entitySubType = data().deepCopy(fields()[5].schema(), other.entitySubType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.entityState)) {
        this.entityState = data().deepCopy(fields()[6].schema(), other.entityState);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.entityDate)) {
        this.entityDate = data().deepCopy(fields()[7].schema(), other.entityDate);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      /*if (other.hasEntityDateBuilder()) {
        this.entityDateBuilder = java.util.Date.newBuilder(other.getEntityDateBuilder());
      }*/
      if (isValidValue(fields()[8], other.entityTitle)) {
        this.entityTitle = data().deepCopy(fields()[8].schema(), other.entityTitle);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.entityTitleOtherDesc)) {
        this.entityTitleOtherDesc = data().deepCopy(fields()[9].schema(), other.entityTitleOtherDesc);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.percentStake)) {
        this.percentStake = data().deepCopy(fields()[10].schema(), other.percentStake);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.isMoreEntityInvolved)) {
        this.isMoreEntityInvolved = data().deepCopy(fields()[11].schema(), other.isMoreEntityInvolved);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.isMoreSignerInvolved)) {
        this.isMoreSignerInvolved = data().deepCopy(fields()[12].schema(), other.isMoreSignerInvolved);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing StakeholderMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.stakeholderId)) {
        this.stakeholderId = data().deepCopy(fields()[0].schema(), other.stakeholderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stakeholders)) {
        this.stakeholders = data().deepCopy(fields()[1].schema(), other.stakeholders);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.signers)) {
        this.signers = data().deepCopy(fields()[2].schema(), other.signers);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.entityName)) {
        this.entityName = data().deepCopy(fields()[3].schema(), other.entityName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.entityType)) {
        this.entityType = data().deepCopy(fields()[4].schema(), other.entityType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.entitySubType)) {
        this.entitySubType = data().deepCopy(fields()[5].schema(), other.entitySubType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.entityState)) {
        this.entityState = data().deepCopy(fields()[6].schema(), other.entityState);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.entityDate)) {
        this.entityDate = data().deepCopy(fields()[7].schema(), other.entityDate);
        fieldSetFlags()[7] = true;
      }
      this.entityDateBuilder = null;
      if (isValidValue(fields()[8], other.entityTitle)) {
        this.entityTitle = data().deepCopy(fields()[8].schema(), other.entityTitle);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.entityTitleOtherDesc)) {
        this.entityTitleOtherDesc = data().deepCopy(fields()[9].schema(), other.entityTitleOtherDesc);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.percentStake)) {
        this.percentStake = data().deepCopy(fields()[10].schema(), other.percentStake);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.isMoreEntityInvolved)) {
        this.isMoreEntityInvolved = data().deepCopy(fields()[11].schema(), other.isMoreEntityInvolved);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.isMoreSignerInvolved)) {
        this.isMoreSignerInvolved = data().deepCopy(fields()[12].schema(), other.isMoreSignerInvolved);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'stakeholderId' field.
      * @return The value.
      */
    public java.lang.Long getStakeholderId() {
      return stakeholderId;
    }


    /**
      * Sets the value of the 'stakeholderId' field.
      * @param value The value of 'stakeholderId'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setStakeholderId(java.lang.Long value) {
      validate(fields()[0], value);
      this.stakeholderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stakeholderId' field has been set.
      * @return True if the 'stakeholderId' field has been set, false otherwise.
      */
    public boolean hasStakeholderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stakeholderId' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearStakeholderId() {
      stakeholderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'stakeholders' field.
      * @return The value.
      */
    public java.util.List<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage> getStakeholders() {
      return stakeholders;
    }


    /**
      * Sets the value of the 'stakeholders' field.
      * @param value The value of 'stakeholders'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setStakeholders(java.util.List<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage> value) {
      validate(fields()[1], value);
      this.stakeholders = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'stakeholders' field has been set.
      * @return True if the 'stakeholders' field has been set, false otherwise.
      */
    public boolean hasStakeholders() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'stakeholders' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearStakeholders() {
      stakeholders = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'signers' field.
      * @return The value.
      */
    public java.util.List<com.tenx.resi.ms.contract.api.message.offer.SignerMessage> getSigners() {
      return signers;
    }


    /**
      * Sets the value of the 'signers' field.
      * @param value The value of 'signers'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setSigners(java.util.List<com.tenx.resi.ms.contract.api.message.offer.SignerMessage> value) {
      validate(fields()[2], value);
      this.signers = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'signers' field has been set.
      * @return True if the 'signers' field has been set, false otherwise.
      */
    public boolean hasSigners() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'signers' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearSigners() {
      signers = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityName' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityName() {
      return entityName;
    }


    /**
      * Sets the value of the 'entityName' field.
      * @param value The value of 'entityName'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setEntityName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.entityName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'entityName' field has been set.
      * @return True if the 'entityName' field has been set, false otherwise.
      */
    public boolean hasEntityName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'entityName' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearEntityName() {
      entityName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityType() {
      return entityType;
    }


    /**
      * Sets the value of the 'entityType' field.
      * @param value The value of 'entityType'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setEntityType(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.entityType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'entityType' field has been set.
      * @return True if the 'entityType' field has been set, false otherwise.
      */
    public boolean hasEntityType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'entityType' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearEntityType() {
      entityType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'entitySubType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntitySubType() {
      return entitySubType;
    }


    /**
      * Sets the value of the 'entitySubType' field.
      * @param value The value of 'entitySubType'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setEntitySubType(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.entitySubType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'entitySubType' field has been set.
      * @return True if the 'entitySubType' field has been set, false otherwise.
      */
    public boolean hasEntitySubType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'entitySubType' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearEntitySubType() {
      entitySubType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityState' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityState() {
      return entityState;
    }


    /**
      * Sets the value of the 'entityState' field.
      * @param value The value of 'entityState'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setEntityState(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.entityState = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'entityState' field has been set.
      * @return True if the 'entityState' field has been set, false otherwise.
      */
    public boolean hasEntityState() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'entityState' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearEntityState() {
      entityState = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityDate' field.
      * @return The value.
      */
    public java.util.Date getEntityDate() {
      return entityDate;
    }


    /**
      * Sets the value of the 'entityDate' field.
      * @param value The value of 'entityDate'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setEntityDate(java.util.Date value) {
      validate(fields()[7], value);
      this.entityDateBuilder = null;
      this.entityDate = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'entityDate' field has been set.
      * @return True if the 'entityDate' field has been set, false otherwise.
      */
    public boolean hasEntityDate() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'entityDate' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    /*public java.util.Date.Builder getEntityDateBuilder() {
      if (entityDateBuilder == null) {
        if (hasEntityDate()) {
          setEntityDateBuilder(java.util.Date.newBuilder(entityDate));
        } else {
          setEntityDateBuilder(java.util.Date.newBuilder());
        }
      }
      return entityDateBuilder;
    }*/

    /**
     * Sets the Builder instance for the 'entityDate' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    /*public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setEntityDateBuilder(java.util.Date.Builder value) {
      clearEntityDate();
      entityDateBuilder = value;
      return this;
    }*/

    /**
     * Checks whether the 'entityDate' field has an active Builder instance
     * @return True if the 'entityDate' field has an active Builder instance
     */
    public boolean hasEntityDateBuilder() {
      return entityDateBuilder != null;
    }

    /**
      * Clears the value of the 'entityDate' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearEntityDate() {
      entityDate = null;
      entityDateBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityTitle' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityTitle() {
      return entityTitle;
    }


    /**
      * Sets the value of the 'entityTitle' field.
      * @param value The value of 'entityTitle'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setEntityTitle(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.entityTitle = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'entityTitle' field has been set.
      * @return True if the 'entityTitle' field has been set, false otherwise.
      */
    public boolean hasEntityTitle() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'entityTitle' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearEntityTitle() {
      entityTitle = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityTitleOtherDesc' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityTitleOtherDesc() {
      return entityTitleOtherDesc;
    }


    /**
      * Sets the value of the 'entityTitleOtherDesc' field.
      * @param value The value of 'entityTitleOtherDesc'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setEntityTitleOtherDesc(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.entityTitleOtherDesc = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'entityTitleOtherDesc' field has been set.
      * @return True if the 'entityTitleOtherDesc' field has been set, false otherwise.
      */
    public boolean hasEntityTitleOtherDesc() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'entityTitleOtherDesc' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearEntityTitleOtherDesc() {
      entityTitleOtherDesc = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'percentStake' field.
      * @return The value.
      */
    public java.math.BigDecimal getPercentStake() {
      return percentStake;
    }


    /**
      * Sets the value of the 'percentStake' field.
      * @param value The value of 'percentStake'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setPercentStake(java.math.BigDecimal value) {
      validate(fields()[10], value);
      this.percentStake = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'percentStake' field has been set.
      * @return True if the 'percentStake' field has been set, false otherwise.
      */
    public boolean hasPercentStake() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'percentStake' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearPercentStake() {
      percentStake = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'isMoreEntityInvolved' field.
      * @return The value.
      */
    public boolean getIsMoreEntityInvolved() {
      return isMoreEntityInvolved;
    }


    /**
      * Sets the value of the 'isMoreEntityInvolved' field.
      * @param value The value of 'isMoreEntityInvolved'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setIsMoreEntityInvolved(boolean value) {
      validate(fields()[11], value);
      this.isMoreEntityInvolved = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'isMoreEntityInvolved' field has been set.
      * @return True if the 'isMoreEntityInvolved' field has been set, false otherwise.
      */
    public boolean hasIsMoreEntityInvolved() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'isMoreEntityInvolved' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearIsMoreEntityInvolved() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'isMoreSignerInvolved' field.
      * @return The value.
      */
    public boolean getIsMoreSignerInvolved() {
      return isMoreSignerInvolved;
    }


    /**
      * Sets the value of the 'isMoreSignerInvolved' field.
      * @param value The value of 'isMoreSignerInvolved'.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder setIsMoreSignerInvolved(boolean value) {
      validate(fields()[12], value);
      this.isMoreSignerInvolved = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'isMoreSignerInvolved' field has been set.
      * @return True if the 'isMoreSignerInvolved' field has been set, false otherwise.
      */
    public boolean hasIsMoreSignerInvolved() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'isMoreSignerInvolved' field.
      * @return This builder.
      */
    public com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage.Builder clearIsMoreSignerInvolved() {
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StakeholderMessage build() {
      try {
        StakeholderMessage record = new StakeholderMessage();
        record.stakeholderId = fieldSetFlags()[0] ? this.stakeholderId : (java.lang.Long) defaultValue(fields()[0]);
        record.stakeholders = fieldSetFlags()[1] ? this.stakeholders : (java.util.List<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage>) defaultValue(fields()[1]);
        record.signers = fieldSetFlags()[2] ? this.signers : (java.util.List<com.tenx.resi.ms.contract.api.message.offer.SignerMessage>) defaultValue(fields()[2]);
        record.entityName = fieldSetFlags()[3] ? this.entityName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.entityType = fieldSetFlags()[4] ? this.entityType : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.entitySubType = fieldSetFlags()[5] ? this.entitySubType : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.entityState = fieldSetFlags()[6] ? this.entityState : (java.lang.CharSequence) defaultValue(fields()[6]);
        /*if (entityDateBuilder != null) {
          try {
            record.entityDate = this.entityDateBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("entityDate"));
            throw e;
          }
        } else {*/
          record.entityDate = fieldSetFlags()[7] ? this.entityDate : (java.util.Date) defaultValue(fields()[7]);
        //}
        record.entityTitle = fieldSetFlags()[8] ? this.entityTitle : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.entityTitleOtherDesc = fieldSetFlags()[9] ? this.entityTitleOtherDesc : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.percentStake = fieldSetFlags()[10] ? this.percentStake : (java.math.BigDecimal) defaultValue(fields()[10]);
        record.isMoreEntityInvolved = fieldSetFlags()[11] ? this.isMoreEntityInvolved : (java.lang.Boolean) defaultValue(fields()[11]);
        record.isMoreSignerInvolved = fieldSetFlags()[12] ? this.isMoreSignerInvolved : (java.lang.Boolean) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StakeholderMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<StakeholderMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StakeholderMessage>
    READER$ = (org.apache.avro.io.DatumReader<StakeholderMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.stakeholderId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.stakeholderId);
    }

    if (this.stakeholders == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.stakeholders.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage e0: this.stakeholders) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.signers == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.signers.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (com.tenx.resi.ms.contract.api.message.offer.SignerMessage e1: this.signers) {
        actualSize1++;
        out.startItem();
        e1.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.entityName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entityName);
    }

    if (this.entityType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entityType);
    }

    if (this.entitySubType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entitySubType);
    }

    if (this.entityState == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entityState);
    }

    if (this.entityDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      //this.entityDate.customEncode(out);
    }

    if (this.entityTitle == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entityTitle);
    }

    if (this.entityTitleOtherDesc == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entityTitleOtherDesc);
    }

    if (this.percentStake == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.percentStake.toString());
    }

    out.writeBoolean(this.isMoreEntityInvolved);

    out.writeBoolean(this.isMoreSignerInvolved);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.stakeholderId = null;
      } else {
        this.stakeholderId = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.stakeholders = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage> a0 = this.stakeholders;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage>((int)size0, SCHEMA$.getField("stakeholders").schema().getTypes().get(1));
          this.stakeholders = a0;
        } else a0.clear();
        SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.signers = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<com.tenx.resi.ms.contract.api.message.offer.SignerMessage> a1 = this.signers;
        if (a1 == null) {
          a1 = new SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.SignerMessage>((int)size1, SCHEMA$.getField("signers").schema().getTypes().get(1));
          this.signers = a1;
        } else a1.clear();
        SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.SignerMessage> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.SignerMessage>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            com.tenx.resi.ms.contract.api.message.offer.SignerMessage e1 = (ga1 != null ? ga1.peek() : null);
            if (e1 == null) {
              e1 = new com.tenx.resi.ms.contract.api.message.offer.SignerMessage();
            }
            e1.customDecode(in);
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entityName = null;
      } else {
        this.entityName = in.readString(this.entityName instanceof Utf8 ? (Utf8)this.entityName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entityType = null;
      } else {
        this.entityType = in.readString(this.entityType instanceof Utf8 ? (Utf8)this.entityType : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entitySubType = null;
      } else {
        this.entitySubType = in.readString(this.entitySubType instanceof Utf8 ? (Utf8)this.entitySubType : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entityState = null;
      } else {
        this.entityState = in.readString(this.entityState instanceof Utf8 ? (Utf8)this.entityState : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entityDate = null;
      } else {
        if (this.entityDate == null) {
          this.entityDate = new java.util.Date();
        }
        //this.entityDate.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entityTitle = null;
      } else {
        this.entityTitle = in.readString(this.entityTitle instanceof Utf8 ? (Utf8)this.entityTitle : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entityTitleOtherDesc = null;
      } else {
        this.entityTitleOtherDesc = in.readString(this.entityTitleOtherDesc instanceof Utf8 ? (Utf8)this.entityTitleOtherDesc : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.percentStake = null;
      } else {
        this.percentStake = new java.math.BigDecimal(in.readString());
      }

      this.isMoreEntityInvolved = in.readBoolean();

      this.isMoreSignerInvolved = in.readBoolean();

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.stakeholderId = null;
          } else {
            this.stakeholderId = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.stakeholders = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage> a0 = this.stakeholders;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage>((int)size0, SCHEMA$.getField("stakeholders").schema().getTypes().get(1));
              this.stakeholders = a0;
            } else a0.clear();
            SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.tenx.resi.ms.contract.api.message.offer.StakeholderMessage();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.signers = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<com.tenx.resi.ms.contract.api.message.offer.SignerMessage> a1 = this.signers;
            if (a1 == null) {
              a1 = new SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.SignerMessage>((int)size1, SCHEMA$.getField("signers").schema().getTypes().get(1));
              this.signers = a1;
            } else a1.clear();
            SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.SignerMessage> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.tenx.resi.ms.contract.api.message.offer.SignerMessage>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                com.tenx.resi.ms.contract.api.message.offer.SignerMessage e1 = (ga1 != null ? ga1.peek() : null);
                if (e1 == null) {
                  e1 = new com.tenx.resi.ms.contract.api.message.offer.SignerMessage();
                }
                e1.customDecode(in);
                a1.add(e1);
              }
            }
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entityName = null;
          } else {
            this.entityName = in.readString(this.entityName instanceof Utf8 ? (Utf8)this.entityName : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entityType = null;
          } else {
            this.entityType = in.readString(this.entityType instanceof Utf8 ? (Utf8)this.entityType : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entitySubType = null;
          } else {
            this.entitySubType = in.readString(this.entitySubType instanceof Utf8 ? (Utf8)this.entitySubType : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entityState = null;
          } else {
            this.entityState = in.readString(this.entityState instanceof Utf8 ? (Utf8)this.entityState : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entityDate = null;
          } else {
            if (this.entityDate == null) {
              this.entityDate = new java.util.Date();
            }
            //this.entityDate.customDecode(in);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entityTitle = null;
          } else {
            this.entityTitle = in.readString(this.entityTitle instanceof Utf8 ? (Utf8)this.entityTitle : null);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entityTitleOtherDesc = null;
          } else {
            this.entityTitleOtherDesc = in.readString(this.entityTitleOtherDesc instanceof Utf8 ? (Utf8)this.entityTitleOtherDesc : null);
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.percentStake = null;
          } else {
            this.percentStake = new java.math.BigDecimal(in.readString());
          }
          break;

        case 11:
          this.isMoreEntityInvolved = in.readBoolean();
          break;

        case 12:
          this.isMoreSignerInvolved = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










